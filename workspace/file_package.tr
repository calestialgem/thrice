# This is a comment. There are only line comments in Thrice and they begin with
# "#".

# Juxtaposed comments lines are taken to be joined. This skips over all
# whitespace other than new lines, which means the above line is a separate
# comment, while the below one is continuation of this comment.
#
# Comments can turn to documentation as seen below.


#! This is a comment that is also an inner documentation, as it is marked with
#! "!". It documents the surrounding entity, which is the file named
#! `file_package` in this case.
#!
#! Two newlines are used to separate inner documentation from other entities in
#! the code by convention.
#!
#! This file is an executable Thrice demo for 0.1.0 version of Rainfall. Uses
#! all the available features in the language.


# Fallowing is an exhaustive list of all statements (S Group) in the language.

# [S0] Statement. A command for the computer to execute.

# [S1] Discarded Expression Statement. A lone expression fallowed by a
# semicolon. Expression is evaluated but its result is discarded.

# Fallowing is an exhaustive list of all expressions (E Group) in the language.

# [E0] Expression. A calculation that results in a value with a type. Type
# and/or value might depend on the type and/or value expected from the
# expression, which comes from the position it is in.

# [E1] Number Literal Expression. See `number_literal`.

# [E2] Arithmetic Expressions. Arithmetic expressions are defined for the
# built-in arithmetic types for doing basic calculations using operators.

# Binary Arithmetic Operators

5 * 5; # multiplication
5 / 5; # division
5 % 5; # reminder
5 + 5; # addition
5 - 5; # subtraction

# Unary Arithmetic Operators

+5; # posate
-5; # negate

# [E3] Comparison Expressions. Comparison expressions are defined for the
# built-in arithmetic types for doing basic comparison using operators.

5 == 5; # equals to
5 != 5; # not equals to
5 < 5;  # less than
5 > 5;  # greater than
5 <= 5; # less than or equals to
5 >= 5; # greater than or equals to

# [E4] Logical Expressions. Logical expressions are defined for the `bool` type for doing basic logical combinations using operators.
