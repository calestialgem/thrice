#! This is a demo file, showcasing all the features of Thrice that can be
#! compiled by the alpha 1.0.0 version of the Rainfall compiler.

# [D] Definition

# [D::101] Function Definition
export func main() void {
  func product(i32 x, i32 y) i32 { return x * y; }

  # [D::201] Structure Definition
  struct vector{f32 x, f32 y}

  # [D::301] Type Alias Definition
  type vector_alias = vector;

  # [D::401] Variable Definition
  mut i32 var = 17;

  # [X] Expression

  # [X::101] Numeric Constant
  2_147_483_647;
  3.14;
  3.5e6;

  # [X::201] Initialization
  i32{5.5};
  vector v = vector{5.5, 10};

  # [X::202] Grouping
  (17);

  # [X::203] Access
  true;
  ::main;
  var;

  # [X::204] Member Access
  v.x;

  # [X::205] Function Call
  product(10, 20);

  # [X::301] Promotion
  +5;

  # [X::302] Negation
  -5;

  # [X::303] Addition
  17 + 5;

  # [X::304] Subtraction
  17 - 5;

  # [X::305] Multiplication
  17 * 5;

  # [X::306] Division
  17 / 5;

  # [X::307] Reminder
  17 % 5;

  # [X::308] Bitwise NOT
  ~5;

  # [X::309] Bitwise AND
  17 & 5;

  # [X::310] Bitwise OR
  17 | 5;

  # [X::311] Bitwise XOR
  17 ^ 5;

  # [X::312] Bitwise Left Shift
  17 << 5;

  # [X::313] Bitwise Right Shift
  17 >> 5;

  # [X::401] Logical NOT
  !false;

  # [X::402] Logical AND
  true && true;

  # [X::403] Logical OR
  true || false;

  # [X::501] Equal To
  17 == 60;

  # [X::502] Not Equal To
  17 != 60;

  # [X::503] Less Than
  17 < 60;

  # [X::504] Greater Than
  17 > 60;

  # [X::505] Less Than Or Equal To
  17 <= 60;

  # [X::506] Greater Than or Equal To
  17 >= 60;

  # [X::601] Basic Assignment
  var = 60;

  # [X::602] Addition Assignment
  var += 60;

  # [X::603] Subtraction Assignment
  var -= 60;

  # [X::604] Multiplication Assignment
  var *= 60;

  # [X::605] Division Assignment
  var /= 60;

  # [X::606] Reminder Assignment
  var %= 60;

  # [X::607] Bitwise AND Assignment
  var &= 60;

  # [X::608] Bitwise OR Assignment
  var |= 60;

  # [X::609] Bitwise XOR Assignment
  var ^= 60;

  # [X::610] Bitwise Left Shift Assignment
  var <<= 60;

  # [X::611] Bitwise Right Shift Assignment
  var >>= 60;

  # [X::701] Prefix Increment
  ++var;

  # [X::702] Prefix Decrement
  --var;

  # [X::703] Postfix Increment
  var++;

  # [X::704] Postfix Decrement
  var--;

  # [T] Type

  # [T::101] Access
  bool flag = false;
  u8 plain = 22;
  vector my_vec = v;

  # [T::102] Inferred
  auto u = v;

  # [T::201] Constant Qualified
  const u8 constant = 17;

  # [T::202] Mutable Qualified
  mut u8 mutable = 60;

  # [T::203] Reference Qualified
  &u8 reference = plain;

  # [T::204] Mutable Reference Qualified
  &mut u8 mutable_reference = mutable;

  # [T::301] Function
  type unsigned_long_binary_operation = func(u64, u64) u64;

  # [S] Statement

  # [S::101] Define Statement
  mut i32 variable = 17;

  # [S::102] Discard Statement
  17;

  # [S::201] Compound Statement
  {
    mut i32 my_int = 80;
    my_int++;
  }

  # [S::202] If Selection Statement
  if (true) 17;
  else 60;

  # [S::203] Switch Selection Statement
  switch (variable) {
    case (constant) 6;
    case (60) 15;
    default 77;
  }

  # [S::301] While Iteration Statement
  mut bool loop = true;
  label: while (loop) {
    loop = false;

    # [S::302] For Iteration Statement
    for (mut i32 i = 0; i < 100; i++) {
      # [S::401] Break Jump Statement
      if (i > 50) break;
      else if (i > 40) break label;
      # [S::402] Continue Jump Statement
      else if (i > 30) continue label;
      else continue;
    }
  }

  # [S::403] Return Jump Statement
  func returns_an_int() i32 { return 5; }

  return;
}
